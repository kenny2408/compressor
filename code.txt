compressor.py module:

import os
import zipfile
import rarfile


class Compressor:
    def __init__(self):
        pass

    def compress_file(self, file_path, format='zip'):
        if not os.path.isfile(file_path):
            raise ValueError(f'{file_path} is not a file')

        file_dir, file_name = os.path.split(file_path)
        archive_path = os.path.join(file_dir, f'{file_name}.{format}')

        if format == 'zip':
            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:
                archive.write(file_path, file_name)
        elif format == 'rar':
            with rarfile.RarFile(archive_path, 'w') as archive:
                archive.write(file_path, file_name)

        return archive_path

    def compress_folder(self, folder_path, format='zip'):
        if not os.path.isdir(folder_path):
            raise ValueError(f'{folder_path} is not a folder')

        folder_name = os.path.basename(folder_path)
        archive_path = os.path.join(os.path.dirname(folder_path), f'{folder_name}.{format}')

        if format == 'zip':
            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:
                for root, dirs, files in os.walk(folder_path):
                    for file in files:
                        file_path = os.path.join(root, file)
                        archive.write(file_path, os.path.relpath(file_path, folder_path))
        elif format == 'rar':
            with rarfile.RarFile(archive_path, 'w') as archive:
                for root, dirs, files in os.walk(folder_path):
                    for file in files:
                        file_path = os.path.join(root, file)
                        archive.write(file_path, os.path.relpath(file_path, folder_path))

        return archive_path

    def decompress_file(self, file_path):
        if not os.path.isfile(file_path):
            raise ValueError(f'{file_path} is not a file')

        file_dir, file_name = os.path.split(file_path)
        file_name, file_ext = os.path.splitext(file_name)

        if file_ext == '.zip':
            with zipfile.ZipFile(file_path, 'r') as archive:
                archive.extractall(file_dir)
        elif file_ext == '.rar':
            with rarfile.RarFile(file_path, 'r') as archive:
                archive.extractall(file_dir)

        return file_dir

-----------------------------------------------------------------------------------------------------------
view.py module:

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QFileDialog, QMessageBox


class View(QMainWindow):
    def __init__(self):
        super().__init__()

        # Set window properties
        self.setWindowTitle('File Compressor')
        self.setWindowIcon(QIcon('icon.png'))
        self.setFixedSize(400, 200)

        # Create central widget
        central_widget = QWidget()

        # Create layout for central widget
        main_layout = QVBoxLayout()

        # Create input fields and buttons
        self.file_path_input = QLineEdit()
        self.file_path_input.setPlaceholderText('Select a file...')
        self.file_path_button = QPushButton('...')

        self.folder_path_input = QLineEdit()
        self.folder_path_input.setPlaceholderText('Select a folder...')
        self.folder_path_button = QPushButton('...')

        self.compress_file_button = QPushButton('Compress File')
        self.compress_folder_button = QPushButton('Compress Folder')

        self.decompress_file_button = QPushButton('Decompress File')

        # Add input fields and buttons to layout
        main_layout.addWidget(QLabel('File'))

        file_layout = QHBoxLayout()
        file_layout.addWidget(self.file_path_input)
        file_layout.addWidget(self.file_path_button)

        main_layout.addLayout(file_layout)
        main_layout.addWidget(QLabel('Folder'))

        folder_layout = QHBoxLayout()
        folder_layout.addWidget(self.folder_path_input)
        folder_layout.addWidget(self.folder_path_button)

        main_layout.addLayout(folder_layout)
        main_layout.addWidget(self.compress_file_button)
        main_layout.addWidget(self.compress_folder_button)
        main_layout.addWidget(self.decompress_file_button)

        # Set layout for central widget and set as central widget
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # Connect button signals to slots
        self.file_path_button.clicked.connect(self.select_file_path)
        self.folder_path_button.clicked.connect(self.select_folder_path)

    def select_file_path(self):
        file_path, _ = QFileDialog.getOpenFileName(self, 'Select File')
        if file_path:
            self.file_path_input.setText(file_path)

    def select_folder_path(self):
        folder_path = QFileDialog.getExistingDirectory(self, 'Select Folder')
        if folder_path:
            self.folder_path_input.setText(folder_path)

    def show_error(self, message):
        QMessageBox.critical(self, 'Error', message)

    def show_success(self, message):
        QMessageBox.information(self, 'Success', message)

    def clear_inputs(self):
        self.file_path_input.clear()
        self.folder_path_input.clear()

------------------------------------------------------------------------------------------------------------
main.py module:

import sys
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication
from view import View
from compressor import Compressor


class Controller:
    def __init__(self, view, compressor):
        self.view = view
        self.compressor = compressor
        self.connect_signals()

    def connect_signals(self):
        self.view.compress_file_button.clicked.connect(self.compress_file)
        self.view.compress_folder_button.clicked.connect(self.compress_folder)
        self.view.decompress_file_button.clicked.connect(self.decompress_file)

    def compress_file(self):
        file_path = self.view.file_path_input.text()

        if not file_path:
            self.view.show_error('Please select a file to compress')
            return

        try:
            archive_path = self.compressor.compress_file(file_path)
            self.view.show_success(f'{file_path} compressed to {archive_path}')
            self.view.clear_inputs()
        except Exception as e:
            self.view.show_error(str(e))

    def compress_folder(self):
        folder_path = self.view.folder_path_input.text()

        if not folder_path:
            self.view.show_error('Please select a folder to compress')
            return

        try:
            archive_path = self.compressor.compress_folder(folder_path)
            self.view.show_success(f'{folder_path} compressed to {archive_path}')
            self.view.clear_inputs()
        except Exception as e:
            self.view.show_error(str(e))

    def decompress_file(self):
        file_path = self.view.file_path_input.text()

        if not file_path:
            self.view.show_error('Please select a file to decompress')
            return

        try:
            extracted_path = self.compressor.decompress_file(file_path)
            self.view.show_success(f'{file_path} decompressed to {extracted_path}')
            self.view.clear_inputs()
        except Exception as e:
            self.view.show_error(str(e))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setApplicationName('File Compressor')
    app.setWindowIcon(QIcon('icon.png'))

    view = View()
    compressor = Compressor()
    controller = Controller(view, compressor)

    view.show()
    sys.exit(app.exec_())